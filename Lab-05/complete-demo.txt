### Deploying NGinx with Nginx Operator

fdemeloj@fdemeloj$ oc project nginx-ingress
Now using project "nginx-ingress" on server "https://api.cluster.com:443".

fdemeloj@fdemeloj$ oc get pod
NAME                                                         READY   STATUS    RESTARTS   AGE
nginx-ingress-operator-controller-manager-69fbdc7658-5dbkp   2/2     Running   0          2m27s

fdemeloj@fdemeloj$ oc get NginxIngress
No resources found in nginx-ingress namespace.

fdemeloj@fdemeloj$ oc get NginxIngress
NAME                  AGE
nginxingress-sample   2s

fdemeloj@fdemeloj$ oc get pod
NAME                                                         READY   STATUS    RESTARTS   AGE
nginx-ingress-operator-controller-manager-69fbdc7658-5dbkp   2/2     Running   0          2m50s

fdemeloj@fdemeloj$ oc get NginxIngress
NAME                  AGE
nginxingress-sample   13m

### Deploying httpd with deployment

fdemeloj@fdemeloj$ oc get deployment
NAME                                           READY   UP-TO-DATE   AVAILABLE   AGE
example-container-technologies                 3/3     3            3           17s

fdemeloj@fdemeloj$ oc get deployment example-container-technologies -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2025-05-07T20:55:02Z"
  generation: 1
  name: example-container-technologies
  namespace: nginx-ingress
  resourceVersion: "51841"
  uid: 82fc50e7-166a-4838-950f-6c8451acb54c
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: name
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: name
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/httpd:latest
        imagePullPolicy: Always
        name: container
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

fdemeloj@fdemeloj$ oc get pod
NAME                                                         READY   STATUS    RESTARTS   AGE
example-container-technologies-f6757c96f-7rqc6               1/1     Running   0          43s
example-container-technologies-f6757c96f-db64r               1/1     Running   0          43s
example-container-technologies-f6757c96f-slhrc               1/1     Running   0          43s
